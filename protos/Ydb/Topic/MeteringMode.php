<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protos/ydb_topic.proto

namespace Ydb\Topic;

use UnexpectedValueException;

/**
 * Metering mode specifies the method used to determine consumption of resources by the topic.
 * This settings will have an effect only in a serverless database.
 *
 * Protobuf type <code>Ydb.Topic.MeteringMode</code>
 */
class MeteringMode
{
    /**
     * Use default
     *
     * Generated from protobuf enum <code>METERING_MODE_UNSPECIFIED = 0;</code>
     */
    const METERING_MODE_UNSPECIFIED = 0;
    /**
     * Metering based on resource reservation
     *
     * Generated from protobuf enum <code>METERING_MODE_RESERVED_CAPACITY = 1;</code>
     */
    const METERING_MODE_RESERVED_CAPACITY = 1;
    /**
     * Metering based on actual consumption. Default.
     *
     * Generated from protobuf enum <code>METERING_MODE_REQUEST_UNITS = 2;</code>
     */
    const METERING_MODE_REQUEST_UNITS = 2;

    private static $valueToName = [
        self::METERING_MODE_UNSPECIFIED => 'METERING_MODE_UNSPECIFIED',
        self::METERING_MODE_RESERVED_CAPACITY => 'METERING_MODE_RESERVED_CAPACITY',
        self::METERING_MODE_REQUEST_UNITS => 'METERING_MODE_REQUEST_UNITS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

