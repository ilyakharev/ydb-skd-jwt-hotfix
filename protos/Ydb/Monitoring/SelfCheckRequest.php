<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protos/ydb_monitoring.proto

namespace Ydb\Monitoring;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>Ydb.Monitoring.SelfCheckRequest</code>
 */
class SelfCheckRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * basic operation params, including timeout
     *
     * Generated from protobuf field <code>.Ydb.Operations.OperationParams operation_params = 1;</code>
     */
    protected $operation_params = null;
    /**
     * return detailed info about components checked with their statuses
     *
     * Generated from protobuf field <code>bool return_verbose_status = 2;</code>
     */
    protected $return_verbose_status = false;
    /**
     * minimum status of issues to return
     *
     * Generated from protobuf field <code>.Ydb.Monitoring.StatusFlag.Status minimum_status = 3;</code>
     */
    protected $minimum_status = 0;
    /**
     * maximum level of issues to return
     *
     * Generated from protobuf field <code>uint32 maximum_level = 4;</code>
     */
    protected $maximum_level = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Ydb\Operations\OperationParams $operation_params
     *           basic operation params, including timeout
     *     @type bool $return_verbose_status
     *           return detailed info about components checked with their statuses
     *     @type int $minimum_status
     *           minimum status of issues to return
     *     @type int $maximum_level
     *           maximum level of issues to return
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Protos\YdbMonitoring::initOnce();
        parent::__construct($data);
    }

    /**
     * basic operation params, including timeout
     *
     * Generated from protobuf field <code>.Ydb.Operations.OperationParams operation_params = 1;</code>
     * @return \Ydb\Operations\OperationParams|null
     */
    public function getOperationParams()
    {
        return $this->operation_params;
    }

    public function hasOperationParams()
    {
        return isset($this->operation_params);
    }

    public function clearOperationParams()
    {
        unset($this->operation_params);
    }

    /**
     * basic operation params, including timeout
     *
     * Generated from protobuf field <code>.Ydb.Operations.OperationParams operation_params = 1;</code>
     * @param \Ydb\Operations\OperationParams $var
     * @return $this
     */
    public function setOperationParams($var)
    {
        GPBUtil::checkMessage($var, \Ydb\Operations\OperationParams::class);
        $this->operation_params = $var;

        return $this;
    }

    /**
     * return detailed info about components checked with their statuses
     *
     * Generated from protobuf field <code>bool return_verbose_status = 2;</code>
     * @return bool
     */
    public function getReturnVerboseStatus()
    {
        return $this->return_verbose_status;
    }

    /**
     * return detailed info about components checked with their statuses
     *
     * Generated from protobuf field <code>bool return_verbose_status = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setReturnVerboseStatus($var)
    {
        GPBUtil::checkBool($var);
        $this->return_verbose_status = $var;

        return $this;
    }

    /**
     * minimum status of issues to return
     *
     * Generated from protobuf field <code>.Ydb.Monitoring.StatusFlag.Status minimum_status = 3;</code>
     * @return int
     */
    public function getMinimumStatus()
    {
        return $this->minimum_status;
    }

    /**
     * minimum status of issues to return
     *
     * Generated from protobuf field <code>.Ydb.Monitoring.StatusFlag.Status minimum_status = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setMinimumStatus($var)
    {
        GPBUtil::checkEnum($var, \Ydb\Monitoring\StatusFlag\Status::class);
        $this->minimum_status = $var;

        return $this;
    }

    /**
     * maximum level of issues to return
     *
     * Generated from protobuf field <code>uint32 maximum_level = 4;</code>
     * @return int
     */
    public function getMaximumLevel()
    {
        return $this->maximum_level;
    }

    /**
     * maximum level of issues to return
     *
     * Generated from protobuf field <code>uint32 maximum_level = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setMaximumLevel($var)
    {
        GPBUtil::checkUint32($var);
        $this->maximum_level = $var;

        return $this;
    }

}

