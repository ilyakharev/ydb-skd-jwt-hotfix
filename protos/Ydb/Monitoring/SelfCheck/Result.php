<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protos/ydb_monitoring.proto

namespace Ydb\Monitoring\SelfCheck;

use UnexpectedValueException;

/**
 * Describes the result of self-check performed.
 *
 * Protobuf type <code>Ydb.Monitoring.SelfCheck.Result</code>
 */
class Result
{
    /**
     * Generated from protobuf enum <code>UNSPECIFIED = 0;</code>
     */
    const UNSPECIFIED = 0;
    /**
     * Generated from protobuf enum <code>GOOD = 1;</code>
     */
    const GOOD = 1;
    /**
     * Generated from protobuf enum <code>DEGRADED = 2;</code>
     */
    const DEGRADED = 2;
    /**
     * Generated from protobuf enum <code>MAINTENANCE_REQUIRED = 3;</code>
     */
    const MAINTENANCE_REQUIRED = 3;
    /**
     * Generated from protobuf enum <code>EMERGENCY = 4;</code>
     */
    const EMERGENCY = 4;

    private static $valueToName = [
        self::UNSPECIFIED => 'UNSPECIFIED',
        self::GOOD => 'GOOD',
        self::DEGRADED => 'DEGRADED',
        self::MAINTENANCE_REQUIRED => 'MAINTENANCE_REQUIRED',
        self::EMERGENCY => 'EMERGENCY',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Result::class, \Ydb\Monitoring\SelfCheck_Result::class);

